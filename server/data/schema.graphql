type Customer {
  id: ID
  name: String
  surname: String
  company: String
  emails: [Email]
  age: Int
  type: CustomerType
  orders: [Order]
}

type Order {
  product: String
  price: Int
}

type Email {
  email: String
}

type Product {
  id: ID
  name: String
  price: Int
  stock: Int
}

""" Asign a category to a Customer """
enum CustomerType {
  BASIC
  PREMIUM
}

type Query {
  # Customer
  getCustomer(id: ID) : Customer
  getCustomers(limit: Int, offset: Int): [Customer]
  totalCustomers: Int
  # Product
  getProducts(limit: Int, offset: Int): [Product]
  getProduct(id: ID): Product
}

input OrderInput {
  product: String
  price: Int
}

input EmailInput {
  email: String
}

""" Fields for new Customer """
input CustomerInput {
    id: ID
    name: String!
    surname: String!
    company: String!
    emails: [EmailInput]
    age: Int!
    type: CustomerType!
    orders: [OrderInput]
}

""" Fields for new Product """
input ProductInput {
  id: ID
  name: String!
  price: Int!
  stock: Int!
}

""" Mutations for creating Customers """
type Mutation {
  #Resolver Name, Input with Data and Returned Value
  """ Allow you to create New Customers """
  createCustomer(input: CustomerInput) : Customer
  updateCustomer(input: CustomerInput) : Customer
  deleteCustomer(id: ID!) : Boolean
  #products
  createProduct(input: ProductInput) : Product
  updateProduct(input: ProductInput) : Product
  deleteProduct(id: ID) : Boolean
}
